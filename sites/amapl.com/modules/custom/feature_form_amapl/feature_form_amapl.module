<?php
/**
 * @file
 * Code for the Feature form amapl feature.
 */

include_once 'feature_form_amapl.features.inc';
/**
 * Implements hook_entityform_confirm_page_alter().
 */
function feature_form_amapl_entityform_confirm_page_alter(&$render_array, $entityform_type, $entityform_id) {

  // Récupération d'un table d'entité avec une seule valeur : attention, on voit que le deuxième argument est un tableau
  $entity_array = entity_load('entityform', array($entityform_id));

  // Récupération de l'entité
  $entity = $entity_array[$entityform_id];

  $denomination = (isset($entity->field_nom_prenom['und'][0]['value']) ?
    $entity->field_nom_prenom['und'][0]['value'] : $entity->field_ou_denomination_sociale['und'][0]['value']);

  // Modification du champ description de paiement de l'entité
  $entity->field_paiement['und'][0]['description'] =
    '<a href="/entityform/' . $entityform_id . '">Adhesion AMAPL n°' . $entityform_id . '</a>' .
    ' pour ' . $denomination . ' - ' . $entity->field_email['und'][0]['email'];

  // Modification du champ nom du paiement de l'entité
  $entity->field_paiement['und'][0]['name'] = $entityform_id;

  // Enregistrement de l'entité
  $entity->save();
  $_SESSION["entity_form_id"] = $entityform_id;
  drupal_goto("entityform/" . $entityform_id);
}

/**
 * Implements hook_form_alter().
 */
function feature_form_amapl_form_alter(&$form, &$form_state, $form_id) {

  if ($form_id == 'inscription_amapl_entityform_edit_form') {
    // Si le champ de paiement n'est pas encore initialisé, il faut initialiser
    $session_id = str_replace('-', '', strtolower(session_id()));
    if (empty($form['field_paiement']['und']['line_item']['#default_value'])) {
      // les valeurs par défaut du champ de payment sont modifiées
      $form['field_paiement']['und']['line_item']['#default_value'][0] = new stdClass();
      // Valeurs par défaut pour les champs de paiement
      $form['field_paiement']['und']['line_item']['#default_value'][0]->tax_rate = 0.2;
      $form['field_paiement']['und']['line_item']['#default_value'][0]->quantity = 1;
      $form['field_paiement']['und']['line_item']['#default_value'][0]->amount = 0;
      $form['field_paiement']['und']['line_item']['#default_value'][0]->name = 0;
      $form['field_paiement']['und']['line_item']['#default_value'][0]->description = $session_id;
      $form['field_paiement']['und']['line_item']['#default_value'][0]->name = $session_id;
    }

    // appel du js
    drupal_add_js(drupal_get_path('module', 'feature_form_amapl') . '/js/feature_form_amapl.js');

    // appel de la fonction chargée de vérifier les données entrées par l'utilisateur
    $form['#validate'][] = 'feature_form_amapl_form_validate';
  }
}

/*
 * Vérification des données entrées par l'utilisateur
 */
function feature_form_amapl_form_validate($form, &$form_state) {
  drupal_add_js(drupal_get_path('module', 'feature_form_amapl') . '/js/feature_form_amapl.js');
  $price = 0;
  $current_year = date("Y");
  $begin_activity_year = substr($form_state['values']['field_date_debut']['und'][0]['value'], 0, 4);

  //dpm($form_state['values']);

  // forme juridique
  if ($form_state['values']['field_fj_autre']['und'][0]['value'] == '' && $form_state['values']['field_forme_juridique']['und'][0]['value'] == 'AUTRE') {
    form_set_error('field_forme_juridique', t("Vous devez entrer une forme juridique"));
    form_set_error('field_fj_autre', t('... ou renseigner le champ "Autre".'));
  }
  // Dénomination
  if ($form_state['values']['field_nom_prenom']['und'][0]['value'] == '' && $form_state['values']['field_ou_denomination_sociale']['und'][0]['value'] == '') {
    form_set_error('field_nom_prenom', t("Vous devez entrer un nom et un prénom"));
    form_set_error('field_ou_denomination_sociale', t('... ou renseigner le champ "Dénomination sociale".'));
  }
  // Prix **********************************************************************
  // Micro BNC ou première adhésion avec une création d'activité en 2017
  if ($form_state['values']['field_micro_autoentrepreneur']['und'][0]['value'] ||
    ($current_year == $begin_activity_year &&  $form_state['values']['field_type_adhesion']['und'][0]['value'] == "Premiere")) {
    $price = '80.833333333';
  }
  
  // Micro entrepreneur autoentrepreneur
  elseif ($form_state['values']['field_micro_autoentrepreneur']['und'][0]['value']) {
    $price = '80.833333333';
  }
  // Entreprise unipersonnelle
  elseif (
    $form_state['values']['field_forme_juridique']['und'][0]['value'] == "EI" ||
    $form_state['values']['field_forme_juridique']['und'][0]['value'] == "EURL" ||
    $form_state['values']['field_forme_juridique']['und'][0]['value'] == "SELARL"
  ) {
    $price = "162.5";
  }
  // Entreprise avec des associés (plus de 2 si "autre"
  elseif (
    $form_state['values']['field_forme_juridique']['und'][0]['value'] == "SCP" ||
    $form_state['values']['field_forme_juridique']['und'][0]['value'] == "SEP" ||
    $form_state['values']['field_forme_juridique']['und'][0]['value'] == "SDF" ||
    ($form_state['values']['field_forme_juridique']['und'][0]['value'] == "AUTRE" &&
    $form_state['values']['field_nombre_associes']['und'][0]['value'] > 2)

  ) {
    $price = '260';
  }
  else {
    $price = '162.5';
  }

  $form_state['values']['field_prix']['und'][0]['value'] = round($price * 1.2);
  $form_state['values']['field_paiement']['und'][0]['amount'] = $price;

}

/**
 * Implements hook_entity_view().
 */
function feature_form_amapl_entity_view($entity, $type, $view_mode, $langcode) {

  if ($type == "entityform") {
    global $user;
    drupal_add_js(drupal_get_path('module', 'feature_form_amapl') . '/js/feature_view_form_amapl.js');
    // test if anonymous user has the good entityform id. If not: redirection to session-over
    if (!in_array('webmaster', $user->roles) && !in_array('administrator', $user->roles)) {
      if (isset($_SESSION['entity_form_id'])) {
        if ($_SESSION['entity_form_id'] != $entity->entityform_id) {
          drupal_goto('payment/session-over');
        }
      }
      else {
        // Pas de paiement dans la session
        drupal_goto('payment/session-over');
      }
    }
  }
  if ($type == "payment"){

    global $user;
    $path = current_path(); // payment/32/view
    $pattern = '/payment\/[0-9]*\/view/';

    if (preg_match($pattern, $path)) {
      // Je suis  sur un chemin de type payment/yy/view
      // Check if the user has the 'webmaster or administrator' role.
      if (!in_array('webmaster', $user->roles) && !in_array('administrator', $user->roles)) {
        if (isset($_SESSION['paypal_payment_pps_pid'])) {

          if ($entity->pid != $_SESSION['paypal_payment_pps_pid']){
            drupal_goto('payment/session-over');
          }
        }
        else {
          // Pas de paiement dans la session
          drupal_goto('payment/session-over');
        }
      }
    }

  }

}

/**
 * Implements hook_entity_load().
 */
function feature_form_amapl_entity_load($entities, $type) {

}

/**
 * Change historical payment
 */
function changeHistoricalPayment(Payment $payment) {
  $payment_for_entityform_number = array_keys($payment->line_items);

  // charger les entityforms qui correspondent à ces numéros
  foreach ($payment_for_entityform_number as $value) {
    $is_int = is_int($value) ? true : false;
    if ($is_int) {

      // Récupération de tous paiements correspondants à cet entityform pour écrire l'historique
      $entity_payment_array = entity_load('payment');
      $historique = "";
      $statuts = "";
      foreach ($entity_payment_array as $paiement) {
        $numbers = array_keys($paiement->line_items);
        foreach ($numbers as $number) {
          if ($number == $value){
            // Si je traite le paiement qui vient de changer de statut, je récupère ce dernier
            if ($paiement->pid == $payment->pid) $paiement = $payment;

            $statut = ($paiement->getStatus()->status != 'payment_status_success') ? 'Non finalisé' : "Finalisé";
            $historique =
              $historique .
              '<li>' .
              date('d/m/Y - G:i',$paiement->getStatus()->created) .
              ' - Statut : <strong>' .
              $statut .
              '</strong>' .
              ' - n° de paiement : ' .
              $paiement->pid .
              ' - ' .
              $paiement->line_items[$number]->description.
              '</li>' ;
          }
        }
      }

      // Récupération d'un tableau d'entités qui correspondent à ce paiement (normalement une seule)
      $entity_array = entity_load('entityform', array($value));
      foreach ($entity_array as $entity) {
        // Modification du champ historique de paiement de l'entité
        if (isset($historique) && $historique != '') {
          //$wrapper = entity_metadata_wrapper('entityform', $entity); // use wrappers!

          $entity->field_historique_paiement['und'][0]['format'] = "full_html";
          $entity->field_historique_paiement['und'][0]['value'] =
            '<h3>Historique de paiement </h3>' .
            '<ul>' .
            $historique .
            '</ul>';
          $entity->save();
        }

      }

    }
  }
}
/**
 * Implements hook_paypal_payment_pps_data().
 */
function feature_form_amapl_paypal_payment_pps_data(Payment $payment, array &$data) {
  changeHistoricalPayment($payment);
}

/**
 * Implements hook_payment_status_change().
 */
function feature_form_amapl_payment_status_change(Payment $payment, PaymentStatusItem $previous_status_item) {
  changeHistoricalPayment($payment);
}

/**
 * Implements hook_node_view().
 */
function feature_form_amapl_node_view($node, $view_mode, $langcode) {
  $alias = drupal_get_path_alias('node/' . $node->nid);
  if ($alias == 'paypal_payment_pps/return'){
    if(isset($_SESSION['paypal_payment_pps_pid'])){
      $paymentpath = '/payment/' . $_SESSION['paypal_payment_pps_pid'] . '/view';
      /*drupal_goto('payment/' . $_SESSION['paypal_payment_pps_pid'] . '/view');*/
      // appel du js
      drupal_add_js(array('feature_form_amapl' => array('paymentpath' => $paymentpath)), array('type' => 'setting'));
      drupal_add_js(drupal_get_path('module', 'feature_form_amapl') . '/js/gotopayment.js');
    }
  }
}



