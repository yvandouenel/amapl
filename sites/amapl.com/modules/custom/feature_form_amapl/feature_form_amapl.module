<?php
/**
 * @file
 * Code for the Feature form amapl feature.
 */

include_once 'feature_form_amapl.features.inc';
/**
 * Implements hook_entityform_confirm_page_alter().
 */
function feature_form_amapl_entityform_confirm_page_alter(&$render_array, $entityform_type, $entityform_id) {

  // Récupération d'un table d'entité avec une seule valeur : attention, on voit que le deuxième argument est un tableau
  $entity_array = entity_load('entityform', array($entityform_id));

  // Récupération de l'entité
  $entity = $entity_array[$entityform_id];

  $denomination = (isset($entity->field_nom_prenom['und'][0]['value']) ?
    $entity->field_nom_prenom['und'][0]['value'] : $entity->field_ou_denomination_sociale['und'][0]['value']);

  // Modification du champ description de paiement de l'entité
  $entity->field_paiement['und'][0]['description'] =
    '<a href="/entityform/' . $entityform_id . '">Adhesion AMAPL n°' . $entityform_id . '</a>' .
    ' pour ' . $denomination . ' - ' . $entity->field_email['und'][0]['email'];

  // Modification du champ nom du paiement de l'entité
  $entity->field_paiement['und'][0]['name'] = $entityform_id;

  // Enregistrement de l'entité
  $entity->save();
  $_SESSION["entity_form_id"] = $entityform_id;
  drupal_goto("entityform/" . $entityform_id);
}

/**
 * Implements hook_form_alter().
 */
function feature_form_amapl_form_alter(&$form, &$form_state, $form_id) {

  if ($form_id == 'inscription_amapl_entityform_edit_form') {
    // Si le champ de paiement n'est pas encore initialisé, il faut initialiser
    $session_id = str_replace('-', '', strtolower(session_id()));
    if (empty($form['field_paiement']['und']['line_item']['#default_value'])) {
      // les valeurs par défaut du champ de payment sont modifiées
      $form['field_paiement']['und']['line_item']['#default_value'][0] = new stdClass();
      // Valeurs par défaut pour les champs de paiement
      $form['field_paiement']['und']['line_item']['#default_value'][0]->tax_rate = 0.2;
      $form['field_paiement']['und']['line_item']['#default_value'][0]->quantity = 1;
      $form['field_paiement']['und']['line_item']['#default_value'][0]->amount = 0;
      $form['field_paiement']['und']['line_item']['#default_value'][0]->name = 0;
      $form['field_paiement']['und']['line_item']['#default_value'][0]->description = $session_id;
      $form['field_paiement']['und']['line_item']['#default_value'][0]->name = $session_id;
    }

    // appel du js
    drupal_add_js(drupal_get_path('module', 'feature_form_amapl') . '/js/feature_form_amapl.js');

    // appel de la fonction chargée de vérifier les données entrées par l'utilisateur
    $form['#validate'][] = 'feature_form_amapl_form_validate';
  }
}

/*
 * Vérification des données entrées par l'utilisateur
 */
function feature_form_amapl_form_validate($form, &$form_state) {
  drupal_add_js(drupal_get_path('module', 'feature_form_amapl') . '/js/feature_form_amapl.js');
  $price = 0;
  $current_year = date("Y");
  $begin_activity_year = substr($form_state['values']['field_date_debut']['und'][0]['value'], 0, 4);
  $year_income = $form_state['values']['field_pour_les_revenus']['und'][0]['value'];

  //dpm($year_income);

  // forme juridique
  if ($form_state['values']['field_fj_autre']['und'][0]['value'] == '' && $form_state['values']['field_forme_juridique']['und'][0]['value'] == 'AUTRE') {
    form_set_error('field_forme_juridique', t("Vous devez entrer une forme juridique"));
    form_set_error('field_fj_autre', t('... ou renseigner le champ "Autre".'));
  }
  // Dénomination
  if ($form_state['values']['field_nom_prenom']['und'][0]['value'] == '' && $form_state['values']['field_ou_denomination_sociale']['und'][0]['value'] == '') {
    form_set_error('field_nom_prenom', t("Vous devez entrer un nom et un prénom"));
    form_set_error('field_ou_denomination_sociale', t('... ou renseigner le champ "Dénomination sociale".'));
  }
  // Prix **********************************************************************
  // Micro BNC ou première adhésion avec une création d'activité en 2017
  if (
    $form_state['values']['field_micro_autoentrepreneur']['und'][0]['value'] ||
    ((
        $form_state['values']['field_forme_juridique']['und'][0]['value'] == "EI" &&
        $year_income == 2017 && $begin_activity_year == 2017 &&
        $form_state['values']['field_type_adhesion']['und'][0]['value'] == "Premiere")
      ||
      (
        $form_state['values']['field_forme_juridique']['und'][0]['value'] == "EI" &&
        $year_income == 2018 && $begin_activity_year == 2018 &&
        $form_state['values']['field_type_adhesion']['und'][0]['value'] == "Premiere")
    )
  ) {
    if ($year_income == 2017) {
      $price = '80.833333333';
    }
    else {
      if ($year_income == 2018) {
        $price = '82.5';
      }
    }
  }

  // Micro entrepreneur autoentrepreneur
  elseif ($form_state['values']['field_micro_autoentrepreneur']['und'][0]['value']) {
    if ($year_income == 2017) {
      $price = '80.833333333';
    }
    else {
      if ($year_income == 2018) {
        $price = '82.5';
      }
    }
  }
  // Entreprise unipersonnelle
  elseif (
    $form_state['values']['field_forme_juridique']['und'][0]['value'] == "EI" ||
    $form_state['values']['field_forme_juridique']['und'][0]['value'] == "EURL" ||
    $form_state['values']['field_forme_juridique']['und'][0]['value'] == "SELARL"
  ) {
    if ($year_income == 2017) {
      $price = '162.5';
    }
    else {
      if ($year_income == 2018) {
        $price = '165';
      }
    }
  }
  // Entreprise avec des associés (plus de 2 si "autre"
  elseif (
    $form_state['values']['field_forme_juridique']['und'][0]['value'] == "SCP" ||
    $form_state['values']['field_forme_juridique']['und'][0]['value'] == "SEP" ||
    $form_state['values']['field_forme_juridique']['und'][0]['value'] == "SDF" ||
    ($form_state['values']['field_forme_juridique']['und'][0]['value'] == "AUTRE" &&
      $form_state['values']['field_nombre_associes']['und'][0]['value'] > 2)

  ) {
    if ($year_income == 2017) {
      $price = '260';
    }
    else {
      if ($year_income == 2018) {
        $price = '265';
      }
    }
  }
  else {
    if ($year_income == 2017) {
      $price = '162.5';
    }
    else {
      if ($year_income == 2018) {
        $price = '165';
      }
    }
  }

  $form_state['values']['field_prix']['und'][0]['value'] = round($price * 1.2);
  $form_state['values']['field_paiement']['und'][0]['amount'] = $price;

}

/**
 * Implements hook_entity_view().
 */
function feature_form_amapl_entity_view($entity, $type, $view_mode, $langcode) {

  if ($type == "entityform") {
    global $user;
    drupal_add_js(drupal_get_path('module', 'feature_form_amapl') . '/js/feature_view_form_amapl.js');
    // test if anonymous user has the good entityform id. If not: redirection to session-over
    if (!in_array('webmaster', $user->roles) && !in_array('administrator', $user->roles)) {
      if (isset($_SESSION['entity_form_id'])) {
        if ($_SESSION['entity_form_id'] != $entity->entityform_id) {
          drupal_goto('payment/session-over');
        }
      }
      else {
        // Pas de paiement dans la session
        drupal_goto('payment/session-over');
      }
    }
  }
  if ($type == "payment") {

    global $user;
    $path = current_path(); // payment/32/view
    $pattern = '/payment\/[0-9]*\/view/';

    if (preg_match($pattern, $path)) {
      // Je suis  sur un chemin de type payment/yy/view
      // Check if the user has the 'webmaster or administrator' role.
      if (!in_array('webmaster', $user->roles) && !in_array('administrator', $user->roles)) {
        if (isset($_SESSION['paypal_payment_pps_pid'])) {

          if ($entity->pid != $_SESSION['paypal_payment_pps_pid']) {
            drupal_goto('payment/session-over');
          }
        }
        else {
          // Pas de paiement dans la session
          drupal_goto('payment/session-over');
        }
      }
    }

  }

}

/**
 * Implements hook_entity_load().
 */
function feature_form_amapl_entity_load($entities, $type) {

}

/**
 * Change historical payment
 */
function changeHistoricalPayment(Payment $payment) {
  $payment_for_entityform_number = array_keys($payment->line_items);

  // charger les entityforms qui correspondent à ces numéros
  foreach ($payment_for_entityform_number as $value) {
    $is_int = is_int($value) ? TRUE : FALSE;
    if ($is_int) {

      // Récupération de tous paiements correspondants à cet entityform pour écrire l'historique
      $entity_payment_array = entity_load('payment');
      $historique = "";
      $statuts = "";
      foreach ($entity_payment_array as $paiement) {
        $numbers = array_keys($paiement->line_items);
        foreach ($numbers as $number) {
          if ($number == $value) {
            // Si je traite le paiement qui vient de changer de statut, je récupère ce dernier
            if ($paiement->pid == $payment->pid) {
              $paiement = $payment;
            }

            $statut = ($paiement->getStatus()->status != 'payment_status_success') ? 'Non finalisé' : "Finalisé";
            $historique =
              $historique .
              '<li>' .
              date('d/m/Y - G:i', $paiement->getStatus()->created) .
              ' - Statut : <strong>' .
              $statut .
              '</strong>' .
              ' - n° de paiement : ' .
              $paiement->pid .
              ' - ' .
              $paiement->line_items[$number]->description .
              '</li>';
          }
        }
      }

      // Récupération d'un tableau d'entités qui correspondent à ce paiement (normalement une seule)
      $entity_array = entity_load('entityform', array($value));
      foreach ($entity_array as $entity) {
        // Modification du champ historique de paiement de l'entité
        if (isset($historique) && $historique != '') {
          //$wrapper = entity_metadata_wrapper('entityform', $entity); // use wrappers!

          $entity->field_historique_paiement['und'][0]['format'] = "full_html";
          $entity->field_historique_paiement['und'][0]['value'] =
            '<h3>Historique de paiement </h3>' .
            '<ul>' .
            $historique .
            '</ul>';
          $entity->save();
        }
        return $entity;
      }

    }
  }
}

/**
 * Implements hook_paypal_payment_pps_data().
 */
function feature_form_amapl_paypal_payment_pps_data(Payment $payment, array &$data) {
  changeHistoricalPayment($payment);
}

/**
 * Implements hook_payment_status_change().
 */
function feature_form_amapl_payment_status_change(Payment $payment, PaymentStatusItem $previous_status_item) {
  //dpm($payment);
  // Changement historique et récupération de l'entityform concernée *********
  $entity = changeHistoricalPayment($payment);
  //dpm($entity);
  if ($payment->getStatus()->status == "payment_status_success") {
    
    if ($entity) {
      $info_form_subscribe = get_Form_infos($entity);
      
      // Sends email to contact@amapl.com ****************************************
      $description_payment = current($payment->getLineItems())->description;
      $mail_to = "silvain.durand@amapl.com,y.douenel@coopernet.fr";
      $full_name = "contact AMAPL";

      // Build email message
      $to = $mail_to;
      $from = variable_get('site_mail');
      $mail_subject = 'Inscription AMAPL payée en ligne';
      $payment_date = date('d-m-y G:i:s');
      $mail_body =
        "<p>Une nouvelle inscription a été payée en ligne sur le site de l'AMAPL</p>" .
        $description_payment .
        $info_form_subscribe;

      $params = array('subject' => $mail_subject, 'body' => $mail_body);
      $type = 'status';
      if (drupal_mail('feature_form_amapl', 'form_amapl_paid', $to, language_default(), $params, $from)) {
        $message = t('Validation request email message sent successfully to %fullname (%to)', array(
          '%fullname' => $full_name,
          '%to' => $to
        ));
      }
      else {
        $message = t('Email message could not be sent to %fullname (%to)', array(
          '%fullname' => $full_name,
          '%to' => $to
        ));
        $type = 'warning';
      }
      drupal_set_message($message, $type);
    }
  }
}

function get_Form_infos($entity) {
  $msg = '';
  // Historique du paiement
  if (!empty($entity->field_historique_paiement)) {
    $msg .= '<p>' . $entity->field_historique_paiement['und'][0]['value'] . '</p>';
  }
  $msg = '<table border="1" cellpadding="5">';

  // Antenne
  $msg .= '<tr><th>Antenne : </th><td>' . $entity->field_choix_antenne['und'][0]['value'] . '</td></tr>';

  // Année adhésion
  if (!empty($entity->field_pour_les_revenus)) {
    $msg .= '<tr><th>Adhésion pour les revenus : </th><td>' . $entity->field_pour_les_revenus['und'][0]['value'] . '</td></tr>';
  }

  // Forme juridique
  $msg .= '<tr><td colspan="2"><h3>Forme juridique</h3></td></tr>';
  $msg .= '<tr><th>Forme juridique : </th><td>' . $entity->field_forme_juridique['und'][0]['value'] . '</td></tr>';
  if (!empty($entity->field_fj_autre)) {
    $msg .= '<tr><th>Autre forme juridique : </th><td>' . $entity->field_fj_autre['und'][0]['value'] . '</td></tr>';
  }

  if (!empty($entity->field_nombre_associes)) {
    $msg .= '<tr><th>Nombre d\'associés : </th><td>' . $entity->field_nombre_associes['und'][0]['value'] . '</td></tr>';
  }

  // Identification
  if (!empty($entity->field_nom_prenom)) {
    $msg .= '<tr><th>Nom et prénom : </th><td>' . $entity->field_nom_prenom['und'][0]['value'] . '</td></tr>';
  }
  if (!empty($entity->field_email)) {
    $msg .= '<tr><th>Email : </th><td>' . $entity->field_email['und'][0]['email'] . '</td></tr>';
  }
  if (!empty($entity->field_phone)) {
    $msg .= '<tr><th>Téléphone : </th><td>' . $entity->field_phone['und'][0]['value'] . '</td></tr>';
  }
  if (!empty($entity->field_ou_denomination_sociale)) {
    $msg .= '<tr><th>Dénomination sociale : </th><td>' . $entity->field_ou_denomination_sociale['und'][0]['value'] . '</td></tr>';
  }

  if (!empty($entity->field_adresse_professionnelle)) {
    $msg .= '<tr><th>Adresse professionnelle: </th><td>' . $entity->field_adresse_professionnelle['und'][0]['value'] . '</td></tr>';
  }
  if (!empty($entity->field_adresse_correspondance)) {
    $msg .= '<tr><th>Adresse correspondance : </th><td>' . $entity->field_adresse_correspondance['und'][0]['value'] . '</td></tr>';
  }

  //Renseignements relatifs à l'activité
  $msg .= '<tr><td colspan="2"><h3>Renseignements relatifs à l\'activité</h3></td></tr>';
  if (!empty($entity->field_nature_activite)) {
    $msg .= '<tr><th>Nature de l\'activité : </th><td>' . $entity->field_nature_activite['und'][0]['value'] . '</td></tr>';
  }
  if (!empty($entity->field_date_debut)) {
    $msg .= '<tr><th>Date de début de l\'activité : </th><td>' . $entity->field_date_debut['und'][0]['value'] . '</td></tr>';
  }
  if (!empty($entity->field_siret)) {
    $msg .= '<tr><th>Numéro de Siret : </th><td>' . $entity->field_siret['und'][0]['value'] . '</td></tr>';
  }
  if (!empty($entity->field_code_ape)) {
    $msg .= '<tr><th>Code APE : </th><td>' . $entity->field_code_ape['und'][0]['value'] . '</td></tr>';
  }

  if (!empty($entity->field_non_pro) && $entity->field_non_pro['und'][0]['value']) {
    $msg .= '<tr><th>Activité non professionnelle : </th><td>Oui</td></tr>';
  }
  if (!empty($entity->field_source_etrangere) && $entity->field_source_etrangere['und'][0]['value']) {
    $msg .= '<tr><th>Revenus de sources étrangères : </th><td>Oui</td></tr>';
  }
  if (!empty($entity->field_micro_autoentrepreneur) && $entity->field_micro_autoentrepreneur['und'][0]['value']) {
    $msg .= '<tr><th>Adhésion Micro-BNC ou Auto-entrepreneur  : </th><td>Oui</td></tr>';
  }
  if (!empty($entity->field_type_adhesion)) {
    $msg .= '<tr><th>Type d\'adhésion : </th><td>' . $entity->field_type_adhesion['und'][0]['value'] . '</td></tr>';
  }
  if (!empty($entity->field_autre_type_adhesion)) {
    $msg .= '<tr><th>Autre type d\'adhésion:  </th><td>' . $entity->field_autre_type_adhesion['und'][0]['value'] . '</td></tr>';
  }
  if (!empty($entity->field_autre_aga)) {
    $msg .= '<tr><th>Nom et adresse de la précédente AGA : </th><td>' . $entity->field_autre_aga['und'][0]['value'] . '</td></tr>';
  }


  // Tenue des documents comptables
  $msg .= '<tr><td colspan="2"><h3>Tenue des documents comptables</h3></td></tr>';
  if (!empty($entity->field_assistance)) {
    $msg .= '<tr><th>Assistance d\’un professionnel : </th><td>' . $entity->field_assistance['und'][0]['value'] . '</td></tr>';
  }
  if (!empty($entity->field_assistance_nom)) {
    $msg .= '<tr><th>Nom et prénom ou société  : </th><td>' . $entity->field_assistance_nom['und'][0]['value'] . '</td></tr>';
  }
  if (!empty($entity->field_profession)) {
    $msg .= '<tr><th>Profession : </th><td>' . $entity->field_profession['und'][0]['value'] . '</td></tr>';
  }
  if (!empty($entity->field_assistance_adresse)) {
    $msg .= '<tr><th>Adresse : </th><td>' . $entity->field_assistance_adresse['und'][0]['value'] . '</td></tr>';
  }
  if (!empty($entity->field_assistance_phone)) {
    $msg .= '<tr><th>Téléphone : </th><td>' . $entity->field_assistance_phone['und'][0]['value'] . '</td></tr>';
  }
  if (!empty($entity->field_assistance_fax)) {
    $msg .= '<tr><th>Fax : </th><td>' . $entity->field_assistance_fax['und'][0]['value'] . '</td></tr>';
  }
  if (!empty($entity->field_assistance_email)) {
    $msg .= '<tr><th>Email : </th><td>' . $entity->field_assistance_email['und'][0]['value'] . '</td></tr>';
  }


  // Coût de l'adhésion
  $msg .= '<tr><td colspan="2"><h3>Coût de l\'adhésion</h3></td></tr>';
  if (!empty($entity->field_prix)) {
    $msg .= '<tr><th>Coût de l\'adhésion : </th><td>' . $entity->field_prix['und'][0]['value'] . '</td></tr>';
  }
  // Provenance
  $msg .= '<tr><td colspan="2"><h3>Provenance</h3></td></tr>';
  if (!empty($entity->field_provenance)) {
    $msg .= '<tr><th>Provenance : </th><td>' . $entity->field_provenance['und'][0]['value'] . '</td></tr>';
  }
  if (!empty($entity->field_autre_provenance)) {
    $msg .= '<tr><th>Autre provenance : </th><td>' . $entity->field_autre_provenance['und'][0]['value'] . '</td></tr>';
  }

  $msg .= '</table>';
  return $msg;
}
/**
 * Implements hook_mail().
 */
function feature_form_amapl_mail($key, &$message, $params) {
  switch ($key) {
    case 'form_amapl_paid':
      $message['subject'] = $params['subject'];
      $message['body'][] = $params['body'];
      break;
  }
}

/**
 * Implements hook_node_view().
 */
function feature_form_amapl_node_view($node, $view_mode, $langcode) {
  $alias = drupal_get_path_alias('node/' . $node->nid);
  if ($alias == 'paypal_payment_pps/return') {
    if (isset($_SESSION['paypal_payment_pps_pid'])) {
      $paymentpath = '/payment/' . $_SESSION['paypal_payment_pps_pid'] . '/view';
      /*drupal_goto('payment/' . $_SESSION['paypal_payment_pps_pid'] . '/view');*/
      // appel du js
      drupal_add_js(array('feature_form_amapl' => array('paymentpath' => $paymentpath)), array('type' => 'setting'));
      drupal_add_js(drupal_get_path('module', 'feature_form_amapl') . '/js/gotopayment.js');
    }
  }
}



