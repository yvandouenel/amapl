<?php
/**
 * @file
 * Code for the Formations feature.
 */

include_once 'amapl_trainings.features.inc';

define('ADD_TO_SESSION_TEXT', 'Je suis intéressé(e)');
define('REMOVE_FROM_SESSION_TEXT', 'Je ne suis plus intéressé(e)');

/**
 * Implements hook_permission().
 */
function amapl_trainings_permission() {
  return array(
    'administer trainings' => array(
      'title' => t('Administrer les formations'),
    )
  );
}

/**
 * Implements hook_menu().
 */
function amapl_trainings_menu() {
  $items['remove_user_from_session/%'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'amapl_trainings_session_remove_user',
    'access arguments' => array('access content'),
    'access callback' => TRUE,
    'file' => 'amapl_trainings_sessions.ajax.inc',
  );

  $items['admin/config/amapl/trainings'] = array(
    'title' => 'Formations',
    'description' => 'Paramétrage des formations.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('amapl_trainings_settings_form'),
    'access arguments' => array('administer trainings'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'amapl_trainings.admin.inc',
  );

  $items['add_recommendation/%'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'amapl_trainings_add_recommendation',
    'access arguments' => array('acces content'),
    'access callback' => TRUE,
    'file' => 'amapl_trainings.ajax.inc',
  );

  $items['remove_recommendation/%'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'amapl_trainings_remove_recommendation',
    'access arguments' => array('acces content'),
    'access callback' => TRUE,
    'file' => 'amapl_trainings.ajax.inc',
  );

  $items['add_recommendation_from_list/%'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'amapl_trainings_add_recommendation_from_list',
    'access arguments' => array('acces content'),
    'access callback' => TRUE,
    'file' => 'amapl_trainings.ajax.inc',
  );

  $items['remove_recommendation_from_list/%'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'amapl_trainings_remove_recommendation_from_list',
    'access arguments' => array('acces content'),
    'access callback' => TRUE,
    'file' => 'amapl_trainings.ajax.inc',
  );

  $items['add_recommendation_from_brand_tab/%'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'amapl_trainings_add_recommendation_from_brand_tab',
    'access arguments' => array('acces content'),
    'access callback' => TRUE,
    'file' => 'amapl_trainings.ajax.inc',
  );

  $items['remove_recommendation_from_brand_tab/%'] = array(
    'type' => MENU_CALLBACK,
    'page callback' => 'amapl_trainings_remove_recommendation_from_brand_tab',
    'access arguments' => array('acces content'),
    'access callback' => TRUE,
    'file' => 'amapl_trainings.ajax.inc',
  );

  return $items;
}

/*function amapl_trainings_form_training_node_form_alter(&$form, &$form_state, $form_id) {
  drupal_add_js(drupal_get_path('module','amapl_trainings') . '/js/amapl_trainings.js');

  global $user;
  $current_user_roles = $user->roles;
  $amapl_trainings_allowed_roles = array('administrateur','webmaster','référent');
  $current_user_allowed_roles = array_intersect($amapl_trainings_allowed_roles, $current_user_roles);

  // Related brands list handling ----------------------------------------------
  // The training create/edit form always contains a user id.
  // If training is being created, user id is the current user id.
  // If training is being modified, user id is the training author id.
  // In either cases, we must seek for brands the concerned user belongs to.
  $query = db_select('field_data_field_brand_coe', 'coe');
  $query->fields('coe', array('entity_id', 'field_brand_coe_target_id'));
  $query->join('field_data_field_brand_coes', 'coes', 'coes.field_brand_coes_value=coe.entity_id');
  $query->fields('coes', array('entity_id'));
  $query->condition('field_brand_coe_target_id', $form['uid']['#value']);
  $training_brands = $query->execute()->fetchAllKeyed(2, 2);

  $brand_options = $form['field_training_related_brands']['und']['#options'];
  foreach ($brand_options as $key => $brand) {
    if (!in_array($key, $training_brands)) {
      unset($brand_options[$key]);
    }
  }
  $form['field_training_related_brands']['und']['#options'] = $brand_options;

  // Then, if training is being modified and current user is not news author,
  // we must display a disabled brand list, unless current used is allowed to.
  if (isset($form['nid']['#value']) && $user->uid != $form['uid']['#value'] && empty($current_user_allowed_roles) & $user->uid != 1) {
    $form['field_training_related_brands']['#disabled'] = TRUE;
  }
  // End of Related brands list handling ---------------------------------------

  // If training is being created from a brand page,
  // we must catch the brand nid from url
  // and check the corresponding brand in field_related_brands field.
  if (!isset($form['nid']['#value']) && NULL != arg(3)) {
    $form['field_training_related_brands']['und']['#default_value'] = arg(3);
  }
  // End of Related brands list handling ---------------------------------------

  // We must display only sector brands and certifications/labels the parent brand(s) of the current training is (are) related to.
  // First, we get the parent brands.
  $parent_brands = amapl_trainings_get_parent_brands($form['nid']['#value']);
  $parent_certifs_labels = amapl_brands_get_parent_certifs_labels($parent_brands);

  // If any parent brands exist, we get the sector brands of each parent brand.
  if (!empty($parent_brands)) {
    $parent_sector_brands = amapl_brands_get_parent_sector_brands($parent_brands);

    // If any parent sector brands exist
    if (!empty($parent_sector_brands)) {
      // We have to clean the sector brand field options array by keeping only the parent sector brands.
      $form['field_related_sector_brands']['und']['#options'] =
        amapl_clean_sector_brands_options($form['field_related_sector_brands']['und']['#options'], $parent_sector_brands);
    }
    // otherwise we remove the related sector brands field from display.
    else {
      $form['field_related_sector_brands']['#access'] = FALSE;
    }

    // If any certif/label exists
    if (!empty($parent_certifs_labels)) {
      // We have to clean the certifications/labels field options array by keeping only the parent ones.
      $form['field_related_certifs_labels']['und']['#options'] =
        amapl_clean_certifs_labels_options($form['field_related_certifs_labels']['und']['#options'], $parent_certifs_labels);
    }
    else {
      $form['field_related_certifs_labels']['#access'] = FALSE;
    }
  }
  // otherwise we remove the related sector brands field from display.
  else {
    $form['field_related_sector_brands']['#access'] = FALSE;
    $form['field_related_certifs_labels']['#access'] = FALSE;
  }

  // Hide recommended by field to all users, but admin and superadmin.
  if (!in_array('administrateur', $current_user_roles) && $user->uid != 1) {
    unset($form['field_recommended_by']);
  }


  // Move "Champs Crealed" vertical tab to the bottom.
  $form['#groups']['group_amapl_fields']->weight = 200;

  // Stuff that has to be done after form build.
  $form['#after_build'][] = 'amapl_trainings_after_build';

  // Hide scheduled sessions field (handled now by sessions view).
  //$form['field_scheduled_sessions']['#access'] = FALSE;

  // Previous publication status is stored in the readonly field_previous_status.
  $form['field_previous_status']['und'][0]['value']['#default_value'] = $form['#entity']->status;

  $form['#submit'][] = 'amapl_trainings_training_submit_handler';
}*/

function amapl_trainings_training_submit_handler($form, &$form_state) {
  if ($form_state['values']['field_previous_status']['und'][0]['value'] == 0
    && $form_state['values']['status']
    && sizeof(amapl_trainings_get_training_sessions($form_state['values']['nid']))
  ) {
    drupal_set_message('ATTENTION ! toutes les sessions rattachées à cette formation viennent d\'être republiées.', 'warning');
  }
}

function amapl_trainings_after_build($form, &$form_state) {
  // Make the field field_training_search readonly.
  $form['field_training_search']['und'][0]['value']['#attributes']['readonly'] = 'readonly';
  $form_state['values']['field_training_search']['und'][0]['value'] = $form['field_training_search']['und'][0]['value']['#default_value'];

  // Make the field field_previous_status readonly.
  $form['field_previous_status']['und'][0]['value']['#attributes']['readonly'] = 'readonly';

  return $form;
}

/**
 * Implements hook_entity_view_alter().
 */
function amapl_trainings_entity_view_alter(&$build, $type) {
//  if ($type == 'node' && $build['#bundle'] == 'training' && $build['#view_mode'] == 'full') {
  if ($type == 'node' && $build['#bundle'] == 'training') {
    drupal_add_css(drupal_get_path('module', 'amapl_trainings') . '/css/amapl_trainings.css');

    if ($build['#view_mode'] == 'full') {
      ////////////////// CONTACTEZ-NOUS //////////////////////////////////////////
      if (!empty($build['field_training_related_brands']['#items'][0]['entity']->field_brand_email['und'][0]['email'])) {
        $email = $build['field_training_related_brands']['#items'][0]['entity']->field_brand_email['und'][0]['email'];
        $link = '/' . drupal_get_path_alias('node/' . $build['field_training_related_brands']['#items'][0]['entity']->nid)
          . '#bootstrap-fieldgroup-nav-item--contact';
        $contact_link = '<a href="' . $link . '">' . $email . '</a>';
        $build['training_contact'][0]['#markup'] = $contact_link;
      }
      else {
        unset($build['training_contact']);
      }

      ///////////////// SESSIONS HANDLING ////////////////////////////////////////
      // From now on, sessions field value is the concatenation of data entered by user in add/edit form
      // + content provided by the trainings/next_sessions view display.
      $previous_sessions_markup = $build['field_scheduled_sessions'][0]['#markup'];
      $sessions_list = '';
      $sessions_user_links = '';

      $trainings_view = views_get_view('trainings');
      $trainings_view->set_display('sessions_count');
      $trainings_view->pre_execute();
      $sessions_number = trim(strip_tags($trainings_view->render('sessions_count')));
      if ($sessions_number > 0) {


        // Initial version of sessions list (discarded, then re-used).
        $trainings_view = views_get_view('trainings');

        $trainings_view->set_display('next_sessions');
        $trainings_view->pre_execute();
        $sessions_list .= $trainings_view->render('next_sessions');

        //  New version of sessions list, but eventually discarded (see function amapl_trainings_get_next_sessions() below).
        //  $sessions_list = amapl_trainings_get_next_sessions($build['#node']);

        // At the moment we know that at least one training session exists,
        // we can remove the mention "Nous contacter"
        // which is the field_scheduled_sessions saved default value (see amapl_trainings_node_presave hook).
        if (strstr($previous_sessions_markup, 'Nous contacter')) {
          $previous_sessions_markup = '';
        }

        if ($sessions_number > 3) {
          $sessions_list_link = l('Voir toutes les sessions', '/formations/toutes-les-sessions/' . $build['#node']->nid);
          $sessions_list .= '<div class="session-list-link">' . $sessions_list_link . '</div>';
        }
      }
      global $user;
      if ($user->uid == $build['#node']->uid) {
        // On récupère l'info Formation financée par la structure
        $funded = '/0';
        if (isset($build['#node']->field_amapl_funded['und'][0]['value'])) {
          $funded = '/' . $build['#node']->field_amapl_funded['und'][0]['value'];
        }
        $new_session_link = l(
          'Créer une session',
          '/node/add/training-session/' . $build['#node']->nid . $funded,
          array('query' => array('destination' => current_path()))
        );
        $sessions_user_links .= '<div class="new-session-link">' . $new_session_link . '</div>';
      }
      $build['field_scheduled_sessions'][0]['#markup'] = $previous_sessions_markup . $sessions_list . $sessions_user_links;
    }
  }
  if ($type == 'registration' && $build['#bundle'] == 'inscription_amapl') {
    if (isset($build['host_entity_link']['#items'][0]['#markup'])) {
      preg_match_all('~<a(.*?)href="/([^"]+)"(.*?)>~', $build['host_entity_link']['#items'][0]['#markup'], $matches);
      if (isset($matches[2])) {
        $alias_url = $matches[2];
        $normal_path = drupal_get_normal_path($alias_url);
        $normal_path_part = explode("/", $normal_path);
        if(isset($normal_path_part[1])) {
          $session_id = $normal_path_part[1];
          $node_session = node_load($session_id);
          if (isset($node_session->field_related_training['und'][0]['target_id'])) {
            $formation_id = $node_session->field_related_training['und'][0]['target_id'];
            $build['host_entity_link']['#items'][0]['#markup'] = '<h3 class="back-to-training"><a href="/node/' . $formation_id . '">Retour à la formation</a></h3>';
          }
        }
      }
    }

  }

}

/**
 * Implements hook_node_view().
 */
function amapl_trainings_node_view($node, $view_mode, $langcode) {
  if ($node->type == 'training_session') {
    drupal_add_css(drupal_get_path('module', 'amapl_trainings') . '/css/amapl_training_session_popup.css');
  }
  if ($node->type == 'training') {
    if ($view_mode == 'full') {
      drupal_add_js(drupal_get_path('module', 'amapl_trainings') . '/js/amapl_view_trainings.js');
      drupal_add_js(drupal_get_path('module', 'amapl_trainings') . '/js/amapl_training_full.js');
    }

    elseif ($view_mode == 'teaser') {
      drupal_add_js(drupal_get_path('module', 'amapl_trainings') . '/js/amapl_training_list.js');
    }
  }
  elseif ($node->type == 'training_session' && $view_mode == 'colorbox') {
    drupal_add_js(drupal_get_path('module', 'amapl_trainings') . '/js/amapl_training_session_popup.js');
    drupal_add_css(drupal_get_path('module', 'amapl_trainings') . '/css/amapl_training_session_popup.css');

    // If visitor comes from training full node, we remove the link "Voir toutes les sessions".
    $referer = $_SERVER['HTTP_REFERER'];
    if (strpos($referer, '/formations/') !== FALSE) {
      unset($node->content['see_all_sessions_link'][0]['#markup']);
    }
    // else we create the hyperlink pointing to the training full node.
    else {
      $node->content['see_all_sessions_link'][0]['#markup'] =
        '<a href="/node/' . $node->field_related_training['und'][0]['entity']->nid . '">' .
        'Voir les sessions à venir' .
        '</a>';
    }


    // Addition of the 'Jour N - ' prefix.
    $element = $node->content['field_session_dates'];
    $children = array_intersect_key($element, element_children($element));
    $count = 0;
    foreach ($children as $key => $child) {
      $markup = $child['#markup'];
      $tag_content = strip_tags($child['#markup']);
      $node->content['field_session_dates'][$key]['#markup'] = str_replace($tag_content, 'Jour ' . ++$count . ' - ' . $tag_content, $markup);
    }
  }
}

/**
 * Implements hook_node_presave().
 */
function amapl_trainings_node_presave($node) {
  if ($node->type == 'training') {
    // If Sessions programmmées field is empty, the default content is "Nous contacter".
    if (empty($node->field_scheduled_sessions['und'])) {
      $node->field_scheduled_sessions['und'][] = array(
        'value' => '<p>Nous contacter</p>',
        'format' => 'full_html',
      );
    }

    // --- Technical field_training_search field handling --- //
    $training_intro = '';
    $training_public = '';
    $training_aims = '';
    $certifs_labels_names = '';
    $title = $node->title . ' ';
    $training_content = strip_tags($node->body['und'][0]['value']) . ' ';

    if (!empty($node->field_introduction['und'])) {
      $training_intro .= strip_tags($node->field_introduction['und'][0]['value']);
    }

    if (!empty($node->field_training_public['und'])) {
      $training_public .= strip_tags($node->field_training_public['und'][0]['value']);
    }
    if (!empty($node->field_training_aims['und'])) {
      $training_aims = strip_tags($node->field_training_aims['und'][0]['value']);
    }


    // Store training intro, content, public and objectives into field_training_search technical field.
    $search_data = $title . $training_intro . $training_content . $training_public . $training_aims . $certifs_labels_names;

    $search_array = array('value' => $search_data, 'format' => 'plain_text');
    if (!isset($node->field_training_search['und'][0])) {
      $node->field_training_search['und'][] = $search_array;
    }
    else {
      $node->field_training_search['und'][0] = $search_array;
    }
    // --- End of technical field_training_search field handling --- //
  }
}


/**
 * Implements hook_views_pre_render().
 */
function amapl_trainings_views_pre_render(&$view) {
  if ($view->name == 'trainings' && $view->current_display == 'list_page') {
    drupal_add_js(drupal_get_path('module', 'amapl_trainings') . '/js/amapl_view_trainings.js');
    drupal_add_js(drupal_get_path('module', 'amapl_trainings') . '/js/amapl_training_list.js');
  }

  // Training session dates sorting (Sorting setting in Views produce wrong result).
  elseif ($view->name == 'trainings' && $view->current_display == 'training_sessions') {
    $sessions = array();
    foreach ($view->result as $session) {
      $sessions[$session->field_field_session_dates[0]['raw']['value']] = $session;
    };
    // We sort the $sessions array by keys which are strings representing dates in ISO format.
    ksort($sessions);
    $view->result = $sessions;
  }
  elseif ($view->name == 'trainings' && ($view->current_display == 'next_sessions' || $view->current_display == 'all_sessions')) {
    drupal_add_js(drupal_get_path('module', 'amapl_trainings') . '/js/amapl_trainings_sessions.js');

    /*
     * The 2 view displays 'next_sessions' and 'all_sessions' have been build
     * without date filter and without date sorting to prevent unpredictable results.
     * Both displays fetch all sessions belonging to a given training.
     * So, we have to filter and sort results here.
     *
     * RULE 1 - The 2 displays must must filter sessions having the last date greater than current date.
     * For instance:
     *
     * Current date:                          21/11/2017
     *
     * Session 1                                           25/11/2017  15/12/2017  -> visible
     * Session 2                  15/11/2017               25/11/2017              -> visible
     * Session 3     10/10/2017   15/11/2017   21/11/2017                          -> visible
     * Session 4     10/10/2017   15/11/2017                                       -> no longer visible
     *
     * RULE 2 - The 'next_sessions' display must keep the next 3 sessions only.
     *
     * RULE 3 - the session list must be sorted by first date ascending value.     *
     */
    $coming_sessions = array();
    foreach ($view->result as $key => $item) {
      $first_session_date = date('Ymd', strtotime($item->field_field_session_dates[0]['raw']['value']));
      $last_session_date = date('Ymd', strtotime($item->field_field_session_dates_1[0]['raw']['value']));
      $current_date = date('Ymd');

      if ($last_session_date >= $current_date) { // Rule 1
        if (($view->current_display == 'next_sessions' && sizeof($coming_sessions) < 3) || $view->current_display == 'all_sessions') { // Rule 2
          $coming_sessions[$first_session_date] = $item;
        }
      }
    }
    ksort($coming_sessions); // Rule 3

    $view->result = $coming_sessions;
  }

  elseif ($view->name == 'trainings_calendar_prod') {
    foreach ($view->result as $key => $item) {
      if ($item->_field_data['nid']['entity']->type == 'training_session') {
        $delta = $item->field_data_field_session_dates_delta;
        $view->result[$key]->node_title = $item->field_field_related_training[0]['raw']['entity']->title . ' (J' . ($delta + 1) . ')';
      }
    }
  }
}

/**
 * Implements hook_form_alter().
 */
function amapl_trainings_form_alter(&$form, &$form_state, $form_id) {
  if ($form['#id'] == 'views-exposed-form-trainings-list-page') {
    $form['title']['#field_suffix'] = 'Vous ne vous souvenez plus exactement du libellé ?<br /> Une lettre suffit pour lancer la recherche.';
  }
  elseif ($form_id == 'training_session_node_form') {
    drupal_add_js(drupal_get_path('module', 'amapl_trainings') . '/js/amapl_training_sessions_add.js');
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function amapl_trainings_form_training_session_node_form_alter(&$form, &$form_state, $form_id) {
  $form['intro'] = array(
    '#type' => 'item',
    '#markup' => 'Vous n\'avez pas à saisir le titre de la session.<br/>' .
      'Celui-ci sera (re)créé automatiquement à partir ' .
      'du <b><i>titre</i></b> de la formation sélectionnée et de la <b><i>première date</i></b> de la session.',
    '#weight' => -1,

  );
  // If session is being created
  if (!isset($form['nid']['#value'])) {

    // We must provide a temporary title to pass validation successfully.
    // Then an eventual title is created in the custom submit function.
    // See function amapl_trainings_training_session_submit_handler() below.
    $form['title']['#default_value'] = 'temporary title';

    // If session is being created from a training page, we must catch the training nid from url
    // and select the corresponding training in field_related_training field.
    if (!isset($form['nid']['#value']) && NULL != arg(3)) {
      $current_related_training = arg(3);
      $node_training = node_load($current_related_training);

      $options = array();
      if (!empty($node_training)) {
        $options[$node_training->nid] = $node_training->title;
      }

      $form['field_related_training']['und']['#options'] = $options;
      $form['field_related_training']['und']['#default_value'] = array($current_related_training);
    }
    else {
      $training_list = views_get_view_result('trainings', 'page_training_list');

      $options = array();
      if (!empty($training_list)) {
        foreach ($training_list as $training) {
          $options[$training->nid] = $training->node_title;
        }
      }
      $form['field_related_training']['und']['#options'] = $options;
    }
  }

  // If session is being modified :
  // 1) if the current user is not the session author, we must display the select list of auhor's trainings.
  // 2) if session node was created before V3 sprint 3, the new compulsory field_funded_session is NULL.
  // So we must force its value to zero.
  elseif (isset($form['nid']['#value'])) {
    // 1) trainings list
    // Je récupère ici simplement la formation concernée grâce à son id
    $current_related_training = $form_state['node']->field_related_training['und'][0]['target_id'];
    $node_training = node_load($current_related_training);

    $options = array();
    if (!empty($node_training)) {
      $options[$node_training->nid] = $node_training->title;
    }

    $form['field_related_training']['und']['#options'] = $options;
    $form['field_related_training']['und']['#default_value'] = array($current_related_training);

  }

  $form['#submit'][] = 'amapl_trainings_training_session_submit_handler';
}

function amapl_trainings_training_session_submit_handler($form, &$form_state) {
  // Retrieve selected training
  $selected_training = $form_state['input']['field_related_training']['und'];
  $training_title = $form['field_related_training']['und']['#options'][$selected_training];

  // Retrieve first session date
  $first_date = format_date(strtotime($form_state['values']['field_session_dates']['und'][0]['value']), 'custom', 'd M Y');

  // Build session title based on selected training and first session date.
  $form_state['values']['title'] = $training_title . ' (session commençant le ' . $first_date . ')';
}


/**
 * Implements hook_node_postsave().
 */
function amapl_trainings_node_postsave($node, $op) {
  dpm($node->type);
  if ($node->type == 'training') {
    if (($op == 'delete') || ($op == 'update' && $node->status == 0)) {
      if (!empty($sessions = amapl_trainings_get_training_sessions($node->nid))) {
        $unpublished_sessions_nids = 0;
        foreach ($sessions as $session) {
          if ($session->status == 1) {
            $session->status = 0;
            node_save($session);
            $unpublished_sessions_nids++;
          }
        }
        if ($op == 'delete') {
          $msg = "Node {$node->nid} has been deleted. " . $unpublished_sessions_nids . " of its " . sizeof($sessions) . " sessions have been unpublished.";
        }
        else {
          $msg = "Updated node {$node->nid} and " . $unpublished_sessions_nids . " of " . sizeof($sessions) . " sessions have been unpublished.";
        }
        watchdog('amapl_trainings', $msg);
      }
    }
    elseif ($op == 'update' && $node->status == 1 && $node->field_previous_status['und'][0]['value'] == 0) {
      if (!empty($sessions = amapl_trainings_get_training_sessions($node->nid))) {
        $published_sessions_nids = 0;
        foreach ($sessions as $session) {
          if ($session->status == 0) {
            $session->status = 1;
            node_save($session);
            $published_sessions_nids++;
          }
        }
        watchdog('amapl_trainings', "{$op}d node {$node->nid} and " . $published_sessions_nids . " of " . sizeof($sessions) . " sessions have been published.");
      }
    }
  }
  if ($node->type == 'training_session') {
    // Redirect to the linked training
    if (isset($node->field_related_training['und'][0]['target_id'])) {
      drupal_goto('/node/' . $node->field_related_training['und'][0]['target_id']);
    }

  }
}

function amapl_trainings_get_training_sessions($training_nid) {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->entityCondition('bundle', 'training_session')
    ->fieldCondition('field_related_training', 'target_id', $training_nid);

  $result = $query->execute();
  if (isset($result['node'])) {
    return entity_load('node', array_keys($result['node']));
  }

  return array();
}

/**
 * Implements hook_block_info().
 */
function amapl_trainings_block_info() {
  $blocks = array();
  $blocks['amapl_calendar_legend'] = array(
    'info' => t('AMAPL : Légende calendrier formations'),
  );

  return $blocks;
}



